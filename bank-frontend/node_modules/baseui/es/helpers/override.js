function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) 2018-2020 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { isValidElementType } from 'react-is';
export function Override(Base) {
  function ConfigureOverride(allProps, ref) {
    const {
      override,
      ...props
    } = allProps;

    if (override) {
      if (isValidElementType(override)) {
        // https://github.com/facebook/flow/issues/6666
        // eslint-disable-next-line flowtype/no-weak-types
        const ComponentOverride = override; // eslint-disable-next-line flowtype/no-weak-types

        return React.createElement(ComponentOverride, _extends({
          ref: ref
        }, props));
      }

      if (typeof override === 'object') {
        let Component = Base;

        if (override.component && isValidElementType(override.component)) {
          Component = override.component;
        }

        let overrideProps = props;

        if (typeof override.props === 'object') {
          overrideProps = { ...props,
            ...override.props
          };
        } else if (typeof override.props === 'function') {
          overrideProps = override.props(props);
        }

        return React.createElement(Component // eslint-disable-next-line flowtype/no-weak-types
        , _extends({
          ref: ref,
          $style: override.style
        }, overrideProps));
      }
    }

    ConfigureOverride.displayName = Base.displayName;
    return React.createElement(Base, _extends({
      ref: ref
    }, props));
  }

  return React.forwardRef(ConfigureOverride);
}