function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/*
Copyright (c) 2018-2020 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { isValidElementType } from 'react-is';
export function Override(Base) {
  function ConfigureOverride(allProps, ref) {
    var override = allProps.override,
        props = _objectWithoutProperties(allProps, ["override"]);

    if (override) {
      if (isValidElementType(override)) {
        // https://github.com/facebook/flow/issues/6666
        // eslint-disable-next-line flowtype/no-weak-types
        var ComponentOverride = override; // eslint-disable-next-line flowtype/no-weak-types

        return React.createElement(ComponentOverride, _extends({
          ref: ref
        }, props));
      }

      if (_typeof(override) === 'object') {
        var Component = Base;

        if (override.component && isValidElementType(override.component)) {
          Component = override.component;
        }

        var overrideProps = props;

        if (_typeof(override.props) === 'object') {
          overrideProps = _objectSpread({}, props, {}, override.props);
        } else if (typeof override.props === 'function') {
          overrideProps = override.props(props);
        }

        return React.createElement(Component // eslint-disable-next-line flowtype/no-weak-types
        , _extends({
          ref: ref,
          $style: override.style
        }, overrideProps));
      }
    }

    ConfigureOverride.displayName = Base.displayName;
    return React.createElement(Base, _extends({
      ref: ref
    }, props));
  }

  return React.forwardRef(ConfigureOverride);
}