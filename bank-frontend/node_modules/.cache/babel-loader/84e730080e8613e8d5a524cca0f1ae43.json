{"ast":null,"code":"import Axios from 'axios';\nimport { AppFactory } from './app';\nconst appFactory = new AppFactory();\nconst baseURL = \"/api\";\n\nconst instance = () => Axios.create({\n  baseURL\n});\n\nexport const initApp = () => new Promise((resolve, reject) => {\n  instance().get(\"/\").then(response => {\n    console.log(response);\n    let links = response.data._links;\n\n    for (link of links) {\n      Axios.get(link).then(response => console.log(respones));\n    }\n\n    console.log(links);\n    appFactory.setLinks(links);\n  }).catch(error => {\n    console.error(error);\n  });\n});","map":{"version":3,"sources":["/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/backend/api.js"],"names":["Axios","AppFactory","appFactory","baseURL","instance","create","initApp","Promise","resolve","reject","get","then","response","console","log","links","data","_links","link","respones","setLinks","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEA,MAAMC,UAAU,GAAG,IAAID,UAAJ,EAAnB;AAEA,MAAME,OAAO,GAAG,MAAhB;;AAEA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,MAAN,CAAa;AAClCF,EAAAA;AADkC,CAAb,CAAvB;;AAIA,OAAO,MAAMG,OAAO,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5DL,EAAAA,QAAQ,GAAGM,GAAX,CAAe,GAAf,EACCC,IADD,CACMC,QAAQ,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAIG,KAAK,GAAGH,QAAQ,CAACI,IAAT,CAAcC,MAA1B;;AAEA,SAAKC,IAAL,IAAaH,KAAb,EAAoB;AAClBf,MAAAA,KAAK,CAACU,GAAN,CAAUQ,IAAV,EACCP,IADD,CACMC,QAAQ,IAAIC,OAAO,CAACC,GAAR,CAAYK,QAAZ,CADlB;AAED;;AAEDN,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAb,IAAAA,UAAU,CAACkB,QAAX,CAAoBL,KAApB;AACD,GAZD,EAaCM,KAbD,CAaOC,KAAK,IAAI;AACdT,IAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACD,GAfD;AAgBD,CAjB4B,CAAtB","sourcesContent":["import Axios from 'axios';\nimport { AppFactory } from './app';\n\nconst appFactory = new AppFactory();\n\nconst baseURL = \"/api\";\n\nconst instance = () => Axios.create({\n  baseURL\n});\n\nexport const initApp = () => new Promise((resolve, reject) => {\n  instance().get(\"/\")\n  .then(response => {\n    console.log(response);\n    let links = response.data._links;\n    \n    for (link of links) {\n      Axios.get(link)\n      .then(response => console.log(respones))\n    }\n\n    console.log(links);\n    appFactory.setLinks(links)\n  })\n  .catch(error => {\n    console.error(error);\n  })\n})"]},"metadata":{},"sourceType":"module"}