{"ast":null,"code":"var _jsxFileName = \"/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/pages/user-accounts/forms/TransactionForm.jsx\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport { FormControl } from 'baseui/form-control';\nimport { Input, MaskedInput } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport AppContext from '../../../context/AppContext';\nimport { accountDeposit, accountWithdraw, accountTransfer } from '../../../backend/api';\nimport { useHistory } from 'react-router-dom';\nimport UserAccountContext from '../../../context/UserAccountContext';\n\nconst TransactionForm = props => {\n  const {\n    account,\n    transactionType\n  } = props;\n  const {\n    auth\n  } = useContext(AppContext);\n  const {\n    loadAccounts\n  } = useContext(UserAccountContext);\n  const [error, setError] = useState(\"\");\n  const history = useHistory();\n  const [amount, setAmount] = useState(0.00);\n  const [destination, setDestination] = useState(0);\n  useEffect(() => {\n    console.log(account);\n    console.log(props);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n\n      if (amount <= 0) {\n        setError(\"Amount must be greater than 0\");\n        return false;\n      }\n\n      let transactionProm;\n\n      switch (transactionType) {\n        case 'Deposit':\n          transactionProm = accountDeposit(account.number, amount);\n          break;\n\n        case 'Withdraw':\n          transactionProm = accountWithdraw(account.number, amount, auth.currentUser);\n          break;\n\n        case 'Transfer':\n          transactionProm = accountTransfer(account.number, destination, amount, auth.currentUser);\n          break;\n\n        default:\n          transactionProm = Promise.reject(new Error(\"Invalid transactionType: '\" + transactionType + \"'\"));\n          break;\n      }\n\n      ;\n      transactionProm.then(response => {\n        console.log(response);\n        loadAccounts();\n      }).catch(error => {\n        setError(error.message);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    label: () => transactionType + \" amount:\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    value: amount,\n    onChange: e => setAmount(e.target.value),\n    startEnhancer: \"$\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), transactionType === \"Transfer\" && /*#__PURE__*/React.createElement(FormControl, {\n    label: () => \"Destination Account #:\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    value: destination,\n    onChange: e => setDestination(e.target.value),\n    startEnhancer: \"#\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n};\n\nexport default TransactionForm;","map":{"version":3,"sources":["/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/pages/user-accounts/forms/TransactionForm.jsx"],"names":["React","useEffect","useState","useContext","FormControl","Input","MaskedInput","Button","AppContext","accountDeposit","accountWithdraw","accountTransfer","useHistory","UserAccountContext","TransactionForm","props","account","transactionType","auth","loadAccounts","error","setError","history","amount","setAmount","destination","setDestination","console","log","e","preventDefault","transactionProm","number","currentUser","Promise","reject","Error","then","response","catch","message","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { FormControl } from 'baseui/form-control';\nimport { Input, MaskedInput } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport AppContext from '../../../context/AppContext';\nimport { accountDeposit, accountWithdraw, accountTransfer } from '../../../backend/api';\nimport { useHistory } from 'react-router-dom';\nimport UserAccountContext from '../../../context/UserAccountContext';\n\nconst TransactionForm = (props) => {\n  const { account, transactionType } = props;\n  const { auth } = useContext(AppContext);\n  const { loadAccounts } = useContext(UserAccountContext);\n  const [error, setError] = useState(\"\");\n  const history = useHistory();\n\n  const [amount, setAmount] = useState(0.00);\n  const [destination, setDestination] = useState(0);\n\n  useEffect(() => {\n    console.log(account);\n    console.log(props);\n    \n  }, []);\n\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      if (amount <= 0) {\n        setError(\"Amount must be greater than 0\");\n        return false;\n      }\n\n      let transactionProm;\n\n      switch (transactionType) {\n        case 'Deposit':\n          transactionProm = accountDeposit(account.number, amount);\n          break;\n        \n        case 'Withdraw':\n          transactionProm = accountWithdraw(account.number, amount, auth.currentUser);\n          break;\n        \n        case 'Transfer':\n          transactionProm = accountTransfer(account.number, destination, amount, auth.currentUser)\n          break;\n\n        default:\n          transactionProm = Promise.reject(new Error(\"Invalid transactionType: '\" + transactionType + \"'\"));\n          break;\n      };\n\n      transactionProm\n      .then(response => {\n        console.log(response);\n        loadAccounts();\n      })\n      .catch(error => {\n        setError(error.message);\n      })\n\n    }}>\n      <FormControl label={() => transactionType + \" amount:\"}>\n        <Input\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          startEnhancer=\"$\"\n          required\n        />\n      </FormControl>\n\n      {transactionType === \"Transfer\" && (\n        <FormControl label={() => \"Destination Account #:\"}>\n          <Input\n            type=\"number\"\n            value={destination}\n            onChange={(e) => setDestination(e.target.value)}\n            startEnhancer=\"#\"\n            required\n          />\n        </FormControl>\n      )}\n\n      <Button>Submit</Button>\n\n    </form>\n  );\n};\n\nexport default TransactionForm;"]},"metadata":{},"sourceType":"module"}