{"ast":null,"code":"import _slicedToArray from\"/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext}from'react';import{FormControl}from'baseui/form-control';import{Input}from'baseui/input';import{Button}from'baseui/button';import AppContext from'../../../context/AppContext';import{accountDeposit,accountWithdraw,accountTransfer}from'../../../backend/api';import UserAccountContext from'../../../context/UserAccountContext';import ErrorBox from'../../../common/ErrorBox';var TransactionForm=function TransactionForm(props){var account=props.account,transactionType=props.transactionType;var _useContext=useContext(AppContext),auth=_useContext.auth;var _useContext2=useContext(UserAccountContext),loadAccounts=_useContext2.loadAccounts,setNotify=_useContext2.setNotify;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),error=_useState2[0],setError=_useState2[1];var _useState3=useState(0.00),_useState4=_slicedToArray(_useState3,2),amount=_useState4[0],setAmount=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),destination=_useState6[0],setDestination=_useState6[1];return/*#__PURE__*/React.createElement(\"form\",{onSubmit:function onSubmit(e){e.preventDefault();if(amount<=0){setError(\"Amount must be greater than 0\");return false;}var transactionProm;switch(transactionType){case'Deposit':transactionProm=accountDeposit(account.number,amount);break;case'Withdraw':transactionProm=accountWithdraw(account.number,amount,auth.currentUser);break;case'Transfer':transactionProm=accountTransfer(account.number,destination,amount,auth.currentUser);break;default:transactionProm=Promise.reject(new Error(\"Invalid transactionType: '\"+transactionType+\"'\"));break;};transactionProm.then(function(response){console.log(response);loadAccounts();setNotify(transactionType+\" successful!\");setError(\"\");}).catch(function(error){setError(error.message);});}},/*#__PURE__*/React.createElement(FormControl,{label:function label(){return transactionType+\" amount:\";}},/*#__PURE__*/React.createElement(Input,{type:\"number\",value:amount,onChange:function onChange(e){return setAmount(e.target.value);},startEnhancer:\"$\",required:true})),transactionType===\"Transfer\"&&/*#__PURE__*/React.createElement(FormControl,{label:function label(){return\"Destination Account #:\";}},/*#__PURE__*/React.createElement(Input,{type:\"number\",value:destination,onChange:function onChange(e){return setDestination(e.target.value);},startEnhancer:\"#\",required:true})),/*#__PURE__*/React.createElement(ErrorBox,{error:error}),/*#__PURE__*/React.createElement(Button,null,\"Submit\"));};export default TransactionForm;","map":{"version":3,"sources":["/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/pages/user-accounts/forms/TransactionForm.jsx"],"names":["React","useState","useContext","FormControl","Input","Button","AppContext","accountDeposit","accountWithdraw","accountTransfer","UserAccountContext","ErrorBox","TransactionForm","props","account","transactionType","auth","loadAccounts","setNotify","error","setError","amount","setAmount","destination","setDestination","e","preventDefault","transactionProm","number","currentUser","Promise","reject","Error","then","response","console","log","catch","message","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { FormControl } from 'baseui/form-control';\nimport { Input } from 'baseui/input';\nimport { Button } from 'baseui/button';\nimport AppContext from '../../../context/AppContext';\nimport { accountDeposit, accountWithdraw, accountTransfer } from '../../../backend/api';\nimport UserAccountContext from '../../../context/UserAccountContext';\nimport ErrorBox from '../../../common/ErrorBox';\n\nconst TransactionForm = (props) => {\n  const { account, transactionType } = props;\n  const { auth } = useContext(AppContext);\n  const { loadAccounts, setNotify } = useContext(UserAccountContext);\n  const [error, setError] = useState(\"\");\n\n  const [amount, setAmount] = useState(0.00);\n  const [destination, setDestination] = useState(0);\n\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      if (amount <= 0) {\n        setError(\"Amount must be greater than 0\");\n        return false;\n      }\n\n      let transactionProm;\n\n      switch (transactionType) {\n        case 'Deposit':\n          transactionProm = accountDeposit(account.number, amount);\n          break;\n        \n        case 'Withdraw':\n          transactionProm = accountWithdraw(account.number, amount, auth.currentUser);\n          break;\n        \n        case 'Transfer':\n          transactionProm = accountTransfer(account.number, destination, amount, auth.currentUser)\n          break;\n\n        default:\n          transactionProm = Promise.reject(new Error(\"Invalid transactionType: '\" + transactionType + \"'\"));\n          break;\n      };\n\n      transactionProm\n      .then(response => {\n        console.log(response);\n        loadAccounts();\n        setNotify(transactionType + \" successful!\");\n        setError(\"\");\n      })\n      .catch(error => {\n        setError(error.message);\n      })\n\n    }}>\n      <FormControl label={() => transactionType + \" amount:\"}>\n        <Input\n          type=\"number\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          startEnhancer=\"$\"\n          required\n        />\n      </FormControl>\n\n      {transactionType === \"Transfer\" && (\n        <FormControl label={() => \"Destination Account #:\"}>\n          <Input\n            type=\"number\"\n            value={destination}\n            onChange={(e) => setDestination(e.target.value)}\n            startEnhancer=\"#\"\n            required\n          />\n        </FormControl>\n      )}\n\n      <ErrorBox error={error} />\n\n      <Button>Submit</Button>\n\n    </form>\n  );\n};\n\nexport default TransactionForm;"]},"metadata":{},"sourceType":"module"}