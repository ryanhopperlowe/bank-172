{"ast":null,"code":"var _jsxFileName = \"/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/pages/user-accounts/ListUserAccounts.jsx\";\nimport React, { useEffect, useState, useContext, useCallback } from 'react';\nimport { getUserAccounts, accountClose } from '../../backend/api';\nimport AppContext from '../../context/AppContext';\nimport { Container } from '../../common/StyleClasses';\nimport { Accordion, Panel } from 'baseui/accordion';\nimport { ListItem, ListItemLabel } from 'baseui/list';\nimport { Button } from 'baseui/button';\nimport TransactionForm from './forms/TransactionForm';\nimport UserAccountContext from '../../context/UserAccountContext';\nimport { Toast, KIND } from 'baseui/toast';\n\nconst ListUserAccounts = () => {\n  const {\n    auth,\n    app,\n    setError,\n    appDis\n  } = useContext(AppContext);\n  const [accounts, setAccounts] = useState([]);\n  const [expandPanels, setExpandPanels] = useState(true);\n  const [notify, setNotify] = useState(\"\");\n  const loadAccounts = useCallback(() => {\n    getUserAccounts(auth.currentUser).then(response => {\n      setAccounts([]);\n      console.log(response.accounts);\n      setAccounts(response.accounts);\n      setExpandPanels(false);\n    }).catch(error => {\n      setError(error.message);\n    });\n  }, [auth.currentUser, setError]);\n  useEffect(() => {\n    loadAccounts();\n  }, [loadAccounts]);\n  return /*#__PURE__*/React.createElement(UserAccountContext.Provider, {\n    value: {\n      loadAccounts,\n      setNotify\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"All Your Accounts at a Glance\"), /*#__PURE__*/React.createElement(Accordion, {\n    onChange: ({\n      expanded\n    }) => console.log(expanded),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, accounts.length > 0 && accounts.map(account => /*#__PURE__*/React.createElement(Panel, {\n    expanded: expandPanels,\n    key: account.number,\n    title: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"Account #: \", account.number),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    endEnhancer: () => `$${account.amount.toFixed(2)}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListItemLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }\n  }, \"Balance:\")), /*#__PURE__*/React.createElement(ListItem, {\n    endEnhancer: () => account.type === 'C' ? 'Checking' : 'Savings',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListItemLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }, \"Type:\")), /*#__PURE__*/React.createElement(ListItem, {\n    endEnhancer: () => account.status === 'A' ? 'Active' : 'Inactive',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListItemLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }\n  }, \"Status:\")), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), !!notify && /*#__PURE__*/React.createElement(Toast, {\n    place: true,\n    kind: KIND.positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 30\n    }\n  }, notify), account.status === \"A\" && /*#__PURE__*/React.createElement(Accordion, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Panel, {\n    title: \"Deposit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TransactionForm, {\n    account: account,\n    transactionType: \"Deposit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Panel, {\n    title: \"Withdraw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TransactionForm, {\n    account: account,\n    transactionType: \"Withdraw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Panel, {\n    title: \"Transfer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TransactionForm, {\n    account: account,\n    transactionType: \"Transfer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Panel, {\n    title: \"Close Account\",\n    expanded: expandPanels,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 23\n    }\n  }, \"Are you sure you want to close this account?\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      accountClose(account.number, auth.currentUser).then(response => {\n        loadAccounts();\n        setNotify(\"Account Successfully closed!\");\n        setError(\"\");\n      }).catch(error => {\n        setError(error.message);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 23\n    }\n  }, \"Yes, Close Account\"))), account.status === \"I\" && /*#__PURE__*/React.createElement(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 19\n    }\n  }, \"Reopen Account\")))))));\n};\n\nexport default ListUserAccounts;","map":{"version":3,"sources":["/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/pages/user-accounts/ListUserAccounts.jsx"],"names":["React","useEffect","useState","useContext","useCallback","getUserAccounts","accountClose","AppContext","Container","Accordion","Panel","ListItem","ListItemLabel","Button","TransactionForm","UserAccountContext","Toast","KIND","ListUserAccounts","auth","app","setError","appDis","accounts","setAccounts","expandPanels","setExpandPanels","notify","setNotify","loadAccounts","currentUser","then","response","console","log","catch","error","message","expanded","length","map","account","number","amount","toFixed","type","status","positive"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useCallback } from 'react';\nimport { getUserAccounts, accountClose } from '../../backend/api';\nimport AppContext from '../../context/AppContext';\nimport { Container } from '../../common/StyleClasses';\nimport { Accordion, Panel } from 'baseui/accordion';\nimport {ListItem, ListItemLabel} from 'baseui/list';\nimport {Button} from 'baseui/button';\nimport TransactionForm from './forms/TransactionForm';\nimport UserAccountContext from '../../context/UserAccountContext';\nimport { Toast, KIND } from 'baseui/toast';\n\nconst ListUserAccounts = () => {\n\n  const { auth, app, setError, appDis } = useContext(AppContext);\n\n  const [accounts, setAccounts] = useState([]);\n  const [expandPanels, setExpandPanels] = useState(true);\n  const [notify, setNotify] = useState(\"\");\n\n  const loadAccounts = useCallback(() => {\n    getUserAccounts(auth.currentUser)\n    .then((response) => {\n      setAccounts([]);\n      console.log(response.accounts);\n      setAccounts(response.accounts);\n      setExpandPanels(false);\n    })\n    .catch(error => {\n      setError(error.message);\n    });\n  }, [auth.currentUser, setError])\n\n  useEffect(() => {\n    loadAccounts();\n  }, [loadAccounts])\n\n  return (\n    <UserAccountContext.Provider value={{ loadAccounts, setNotify }}>\n      <Container>\n        <h2>All Your Accounts at a Glance</h2>\n        <Accordion\n          onChange={({ expanded }) => console.log(expanded)}\n        >\n          {accounts.length > 0 && accounts.map((account) => (\n            <Panel \n              expanded={expandPanels}\n              key={account.number} \n              title={\n                <span>Account #: {account.number}</span>\n              }\n            >\n              <ul>\n                <ListItem\n                  endEnhancer={() => `$${account.amount.toFixed(2)}`}\n                >\n                  <ListItemLabel>Balance:</ListItemLabel>\n                </ListItem>\n                <ListItem\n                  endEnhancer={() => account.type === 'C' ? 'Checking' : 'Savings'}\n                >\n                  <ListItemLabel>Type:</ListItemLabel>\n                </ListItem>\n                <ListItem\n                  endEnhancer={() => account.status === 'A' ? 'Active' : 'Inactive'}\n                >\n                  <ListItemLabel>Status:</ListItemLabel>\n                </ListItem>\n              \n                <hr/>\n                \n                {!!notify && <Toast place kind={KIND.positive}>{notify}</Toast>}\n                \n                {account.status === \"A\" && (\n                  <Accordion>\n                    <Panel title=\"Deposit\">\n                      <TransactionForm account={account} transactionType=\"Deposit\" />\n                    </Panel>\n                    <Panel title=\"Withdraw\">\n                      <TransactionForm account={account} transactionType=\"Withdraw\" />\n                    </Panel>\n                    <Panel title=\"Transfer\">\n                      <TransactionForm account={account} transactionType=\"Transfer\" />\n                    </Panel>\n                    <Panel title=\"Close Account\" expanded={expandPanels}>\n                      <h4>Are you sure you want to close this account?</h4>\n                      <Button onClick={() => {\n                        accountClose(account.number, auth.currentUser)\n                        .then(response => {\n                          loadAccounts();\n                          setNotify(\"Account Successfully closed!\")\n                          setError(\"\");\n                        })\n                        .catch(error => {\n                          setError(error.message)\n                        })\n                      }}>Yes, Close Account</Button>\n                    </Panel>\n                  </Accordion>\n                )}\n                {account.status === \"I\" && (\n                  <Button>Reopen Account</Button>\n                )}\n              </ul>\n              \n            </Panel>\n          ))}\n        </Accordion>\n      </Container>\n    </UserAccountContext.Provider>\n  );\n};\n\nexport default ListUserAccounts;"]},"metadata":{},"sourceType":"module"}