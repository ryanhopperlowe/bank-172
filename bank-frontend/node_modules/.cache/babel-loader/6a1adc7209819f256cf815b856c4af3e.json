{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar MultiRef = /*#__PURE__*/function () {\n  function MultiRef() {\n    (0, _classCallCheck2.default)(this, MultiRef);\n    (0, _defineProperty2.default)(this, \"map\", new Map());\n    (0, _defineProperty2.default)(this, \"_refFns\", new Map());\n  }\n\n  (0, _createClass2.default)(MultiRef, [{\n    key: \"ref\",\n    value: function ref(key) {\n      var _this = this;\n\n      var refFn = this._refFns.get(key);\n\n      if (!refFn) {\n        refFn = function refFn(value) {\n          if (value == null) {\n            _this._refFns.delete(key);\n\n            _this.map.delete(key);\n          } else {\n            _this.map.set(key, value);\n          }\n        };\n\n        this._refFns.set(key, refFn);\n      }\n\n      return refFn;\n    }\n  }]);\n  return MultiRef;\n}();\n\nexports.default = MultiRef;","map":{"version":3,"sources":["../src/index.js"],"names":["MultiRef","key","refFn","value"],"mappings":";;;;;;;;;;;;;;;IAIqBA,Q;;;+CACH,IAAA,GAAA,E;mDAEW,IAAA,GAAA,E;;;;;wBAEvBC,G,EAAkB;AAAA,UAAA,KAAA,GAAA,IAAA;;AACpB,UAAIC,KAAgB,GAAG,KAAA,OAAA,CAAA,GAAA,CAAvB,GAAuB,CAAvB;;AACA,UAAI,CAAJ,KAAA,EAAY;AACVA,QAAAA,KAAK,GAAG,SAAA,KAAA,CAAA,KAAA,EAAS;AACf,cAAIC,KAAK,IAAT,IAAA,EAAmB;AACjB,YAAA,KAAI,CAAJ,OAAA,CAAA,MAAA,CAAA,GAAA;;AACA,YAAA,KAAI,CAAJ,GAAA,CAAA,MAAA,CAAA,GAAA;AAFF,WAAA,MAGO;AACL,YAAA,KAAI,CAAJ,GAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA;AACD;AANHD,SAAAA;;AAQA,aAAA,OAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA;AACD;;AACD,aAAA,KAAA;AACD","sourcesContent":["/* @flow */\n\ntype RefFn<V> = (value: V|null) => mixed;\n\nexport default class MultiRef<K,V> {\n  map: Map<K,V> = new Map();\n\n  _refFns: Map<K,RefFn<V>> = new Map();\n\n  ref(key: K): RefFn<V> {\n    let refFn: ?RefFn<V> = this._refFns.get(key);\n    if (!refFn) {\n      refFn = value => {\n        if (value == null) {\n          this._refFns.delete(key);\n          this.map.delete(key);\n        } else {\n          this.map.set(key, value);\n        }\n      };\n      this._refFns.set(key, refFn);\n    }\n    return refFn;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}