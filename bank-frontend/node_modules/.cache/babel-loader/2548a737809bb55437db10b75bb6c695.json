{"ast":null,"code":"import Axios from 'axios';\nimport { AppFactory } from './app';\nconst appRef = new AppFactory();\nconst baseURL = \"/api\";\n\nconst instance = () => Axios.create({\n  baseURL\n});\n\nexport const initApp = () => new Promise((resolve, reject) => {\n  instance().get(\"/\").then(response => {\n    console.log(response);\n    let links = response.data._links;\n\n    for (let name in links) {\n      appRef.setLink(name, links[name].href.replace('{?page,size,sort}', ''));\n    }\n\n    console.log(appRef);\n    resolve({\n      success: true\n    });\n  }).catch(error => {\n    console.error(error);\n    reject(error);\n  });\n});\nexport const getAllCustomers = endpoint => new Promise((resolve, reject) => {\n  instance().get(`/customers/all`).then(response => {\n    console.log(response.data);\n    resolve({\n      customers: response.data\n    });\n  }).catch(error => {\n    console.error(error);\n    reject(error);\n  });\n});\nexport const userLogin = (username, pin) => new Promise((resolve, reject) => {\n  instance().post('/login', {\n    username,\n    pin\n  }).then(response => {\n    console.log(response);\n  }).catch(error => {\n    reject(error);\n  });\n});\nexport const userLogout = user => new Promise((resolve, reject) => {\n  reject(new Error(\"not implemented\"));\n});","map":{"version":3,"sources":["/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/backend/api.js"],"names":["Axios","AppFactory","appRef","baseURL","instance","create","initApp","Promise","resolve","reject","get","then","response","console","log","links","data","_links","name","setLink","href","replace","success","catch","error","getAllCustomers","endpoint","customers","userLogin","username","pin","post","userLogout","user","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEA,MAAMC,MAAM,GAAG,IAAID,UAAJ,EAAf;AAEA,MAAME,OAAO,GAAG,MAAhB;;AAEA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,MAAN,CAAa;AAClCF,EAAAA;AADkC,CAAb,CAAvB;;AAIA,OAAO,MAAMG,OAAO,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5DL,EAAAA,QAAQ,GAAGM,GAAX,CAAe,GAAf,EACCC,IADD,CACMC,QAAQ,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAIG,KAAK,GAAGH,QAAQ,CAACI,IAAT,CAAcC,MAA1B;;AAEA,SAAK,IAAIC,IAAT,IAAiBH,KAAjB,EAAwB;AACtBb,MAAAA,MAAM,CAACiB,OAAP,CAAeD,IAAf,EAAqBH,KAAK,CAACG,IAAD,CAAL,CAAYE,IAAZ,CAAiBC,OAAjB,CAAyB,mBAAzB,EAA8C,EAA9C,CAArB;AACD;;AACDR,IAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ;AAEAM,IAAAA,OAAO,CAAC;AACNc,MAAAA,OAAO,EAAE;AADH,KAAD,CAAP;AAGD,GAbD,EAcCC,KAdD,CAcOC,KAAK,IAAI;AACdX,IAAAA,OAAO,CAACW,KAAR,CAAcA,KAAd;AACAf,IAAAA,MAAM,CAACe,KAAD,CAAN;AACD,GAjBD;AAkBD,CAnB4B,CAAtB;AAsBP,OAAO,MAAMC,eAAe,GAAIC,QAAD,IAAc,IAAInB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5EL,EAAAA,QAAQ,GAAGM,GAAX,CAAgB,gBAAhB,EACCC,IADD,CACMC,QAAQ,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACI,IAArB;AACAR,IAAAA,OAAO,CAAC;AACNmB,MAAAA,SAAS,EAAEf,QAAQ,CAACI;AADd,KAAD,CAAP;AAGD,GAND,EAOCO,KAPD,CAOOC,KAAK,IAAI;AACdX,IAAAA,OAAO,CAACW,KAAR,CAAcA,KAAd;AACAf,IAAAA,MAAM,CAACe,KAAD,CAAN;AACD,GAVD;AAWD,CAZ4C,CAAtC;AAcP,OAAO,MAAMI,SAAS,GAAG,CAACC,QAAD,EAAWC,GAAX,KAAmB,IAAIvB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC3EL,EAAAA,QAAQ,GAAG2B,IAAX,CAAgB,QAAhB,EAA0B;AACxBF,IAAAA,QADwB;AAExBC,IAAAA;AAFwB,GAA1B,EAICnB,IAJD,CAIMC,QAAQ,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GAND,EAOCW,KAPD,CAOOC,KAAK,IAAI;AACdf,IAAAA,MAAM,CAACe,KAAD,CAAN;AACD,GATD;AAUD,CAX2C,CAArC;AAcP,OAAO,MAAMQ,UAAU,GAAIC,IAAD,IAAU,IAAI1B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEnEA,EAAAA,MAAM,CAAC,IAAIyB,KAAJ,CAAU,iBAAV,CAAD,CAAN;AAED,CAJmC,CAA7B","sourcesContent":["import Axios from 'axios';\nimport { AppFactory } from './app';\n\nconst appRef = new AppFactory();\n\nconst baseURL = \"/api\";\n\nconst instance = () => Axios.create({\n  baseURL\n});\n\nexport const initApp = () => new Promise((resolve, reject) => {\n  instance().get(\"/\")\n  .then(response => {\n    console.log(response);\n    let links = response.data._links;\n    \n    for (let name in links) {\n      appRef.setLink(name, links[name].href.replace('{?page,size,sort}', ''))\n    }\n    console.log(appRef);\n\n    resolve({\n      success: true\n    });\n  })\n  .catch(error => {\n    console.error(error);\n    reject(error);\n  });\n});\n\n\nexport const getAllCustomers = (endpoint) => new Promise((resolve, reject) => {\n  instance().get(`/customers/all`)\n  .then(response => {\n    console.log(response.data);\n    resolve({\n      customers: response.data\n    });\n  })\n  .catch(error => {\n    console.error(error);\n    reject(error);\n  })\n});\n\nexport const userLogin = (username, pin) => new Promise((resolve, reject) => {\n  instance().post('/login', {\n    username,\n    pin\n  })\n  .then(response => {\n    console.log(response);\n  })\n  .catch(error => {\n    reject(error);\n  })\n})\n\n\nexport const userLogout = (user) => new Promise((resolve, reject) => {\n\n  reject(new Error(\"not implemented\"))\n\n});\n\n"]},"metadata":{},"sourceType":"module"}