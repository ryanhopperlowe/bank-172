{"ast":null,"code":"var _jsxFileName = \"/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/App.js\";\nimport React, { useReducer, useState, useEffect } from 'react';\nimport appReducer, { appInit } from './reducers/appReducer';\nimport AppContext from './context/AppContext';\nimport AppRouter from './routers/AppRouter';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\nimport { initApp, getAllCustomers } from './backend/api';\n\nfunction App() {\n  const [appState, appDispatch] = useReducer(appReducer, {});\n  const [engine] = useState(new Styletron());\n  useEffect(() => {\n    initApp().then(({\n      success\n    }) => {\n      appDispatch(appInit(success));\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyletronProvider, {\n    value: engine,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BaseProvider, {\n    theme: LightTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AppRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/App.js"],"names":["React","useReducer","useState","useEffect","appReducer","appInit","AppContext","AppRouter","Client","Styletron","Provider","StyletronProvider","LightTheme","BaseProvider","initApp","getAllCustomers","App","appState","appDispatch","engine","then","success","catch","error","console"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,UAAP,IAAqBC,OAArB,QAAoC,uBAApC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,yBAApC;AACA,SAASC,QAAQ,IAAIC,iBAArB,QAA8C,iBAA9C;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,QAAzC;AACA,SAASC,OAAT,EAAkBC,eAAlB,QAAyC,eAAzC;;AAEA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,UAAU,CAACG,UAAD,EAAa,EAAb,CAA1C;AACA,QAAM,CAACe,MAAD,IAAajB,QAAQ,CAAC,IAAIO,SAAJ,EAAD,CAA3B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,GACNM,IADD,CACM,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAiB;AACrBH,MAAAA,WAAW,CAACb,OAAO,CAACgB,OAAD,CAAR,CAAX;AACD,KAHD,EAICC,KAJD,CAIOC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAND;AAOD,GARQ,EAQN,EARM,CAAT;AAUA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEJ,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEP,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AASD;;AAED,eAAeI,GAAf","sourcesContent":["import React, { useReducer, useState, useEffect } from 'react';\nimport appReducer, { appInit } from './reducers/appReducer';\nimport AppContext from './context/AppContext';\nimport AppRouter from './routers/AppRouter';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\nimport { initApp, getAllCustomers } from './backend/api';\n\nfunction App() {\n\n  const [appState, appDispatch] = useReducer(appReducer, {});\n  const [engine, ] = useState(new Styletron());\n\n  useEffect(() => {\n    initApp()\n    .then(({ success }) => {\n      appDispatch(appInit(success));\n    })\n    .catch(error => {\n      console.error(error);\n    })\n  }, [])\n\n  return (\n    <AppContext.Provider value={{}}>\n      <StyletronProvider value={engine}>\n        <BaseProvider theme={LightTheme}>\n          <AppRouter />\n        </BaseProvider>\n      </StyletronProvider>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}