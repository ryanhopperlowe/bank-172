{"ast":null,"code":"import _objectSpread from\"/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import Axios from'axios';import{AppFactory}from'./app';var appRef=new AppFactory();var baseURL=\"/api\";var instance=function instance(){return Axios.create({baseURL:baseURL});};export var initApp=function initApp(){return new Promise(function(resolve,reject){instance().get(\"/\").then(function(response){console.log(response);var links=response.data._links;for(var name in links){appRef.setLink(name,links[name].href.replace('{?page,size,sort}',''));}console.log(appRef);resolve({success:true});}).catch(function(error){console.error(error);reject(error);});});};export var getAllCustomers=function getAllCustomers(endpoint){return new Promise(function(resolve,reject){instance().get(\"/customers/all\").then(function(response){console.log(response.data);resolve({customers:response.data});}).catch(function(error){console.error(error);reject(error);});});};export var userLogin=function userLogin(username,pin){return new Promise(function(resolve,reject){instance().post('/customers/login',{username:username,pin:pin}).then(function(response){console.log(response);var user=response.data;resolve({user:user});}).catch(function(error){console.error(error);console.log(error.response);reject(new Error(error.response.data.message));});});};export var userLogout=function userLogout(user){return new Promise(function(resolve,reject){instance().get(\"/customers/logout/\".concat(user.id)).then(function(response){console.log(response);resolve({success:response.data});}).catch(function(error){console.error(error);reject(error);});});};export var userSignup=function userSignup(username,pin){return new Promise(function(resolve,reject){instance().post(\"/customers/create\",{username:username,pin:pin,role:0}).then(function(response){resolve({user:response.data});}).catch(function(error){console.log(error.toJSON());console.log(error.response);reject(new Error(error.response.data.message));});});};export var getUserAccounts=function getUserAccounts(user){return new Promise(function(resolve,reject){instance().get(\"/accounts/for/\".concat(user.id)).then(function(response){console.log(response);resolve({accounts:response.data});}).catch(function(error){console.log(error.response.data);reject(new Error(error.response.data.message));});});};/**\n * Initiate Deposit request with server\n * @param {number} accountNumber Deposit target account\n * @param {number} amount amount of money to deposit\n * @returns {Promise<any>}\n */export var accountDeposit=function accountDeposit(accountNumber,amount){return new Promise(function(resolve,reject){instance().put(\"/accounts/deposit/\".concat(accountNumber),{amount:amount}).then(function(response){console.log(\"Deposit Response: \",response);resolve({account:response.data});}).catch(function(error){console.error(\"Deposit Error: \",error.response);reject(new Error(error.response.data.message));});});};/**\n * Initiate a withdraw request with server\n * @param {number} accountNumber Withdraw target\n * @param {number} amount amount of money to withdraw\n * @param {User} user User making the request\n * @returns {Promise<any>}\n */export var accountWithdraw=function accountWithdraw(accountNumber,amount,user){return new Promise(function(resolve,reject){instance().put(\"/accounts/withdraw/\".concat(accountNumber),{amount:amount,userId:user.id}).then(function(response){console.log(\"Withdraw Response: \",response);resolve({account:response.data});}).catch(function(error){console.error(\"Withdraw Error: \",error.response);reject(new Error(error.response.data.message));});});};/**\n * Initiate transfer between accounts\n * @param {Number} source Source Account Number\n * @param {Number} target Destination Account Number\n * @param {number} amount Amount in $ to be transferred from source to destination\n * @param {User} user User making the transfer request\n * @returns {Promise<any>}\n */export var accountTransfer=function accountTransfer(source,target,amount,user){return new Promise(function(resolve,reject){instance().post('/accounts/transfer',{source:source,target:target,amount:amount,userId:user.id}).then(function(response){console.log(\"Transfer Response: \",response);resolve({account:response.data});}).catch(function(error){console.error(\"Transfer Error: \",error.response);reject(new Error(error.response.data.message));});});};/**\n * \n * @param {{ownerId: number, type: string, amount: number}} account params\n * @returns {Promise<any>} \n */export var accountOpen=function accountOpen(_ref){var ownerId=_ref.ownerId,type=_ref.type,amount=_ref.amount;return new Promise(function(resolve,reject){instance().post(\"/accounts/open\",{ownerId:ownerId,type:type,amount:amount}).then(function(response){resolve(_objectSpread({account:response.data},response));}).catch(function(error){console.error(\"Account Open Error: \",error.response);reject(new Error(error.response.data.message));});});};/**\n * Initiate close request\n * @param {number} accountNumber target account to close\n * @param {User} user user object\n * @returns {Promise<any>}\n */export var accountClose=function accountClose(accountNumber,user){return new Promise(function(resolve,reject){instance().put(\"/accounts/close/\".concat(accountNumber),{userId:user.id}).then(function(response){console.log(\"Account close response: \",response);resolve({account:response.data});}).catch(function(error){console.error(\"Account Close Error: \",error.response);reject(new Error(error.response.data.message));});});};/**\n * Initiate reopen account request\n * @param {number} accountNumber target account number\n * @param {User} user user object with id field\n * @returns {Promise<any>}\n */export var accountReopen=function accountReopen(accountNumber,user){return new Promise(function(resolve,reject){instance().put(\"/accounts/reopen/\".concat(accountNumber),{userId:user.id}).then(function(response){console.log(\"Account Reopen Response: \",response);resolve({account:response.data});}).catch(function(error){console.error(\"Account Reopen Error: \",error.response);reject(new Error(error.response.data.message));});});};","map":{"version":3,"sources":["/Users/rhopperlowe/Desktop/School/Spring 2020/Spring2020_workspace/bank/bank-frontend/src/backend/api.js"],"names":["Axios","AppFactory","appRef","baseURL","instance","create","initApp","Promise","resolve","reject","get","then","response","console","log","links","data","_links","name","setLink","href","replace","success","catch","error","getAllCustomers","endpoint","customers","userLogin","username","pin","post","user","Error","message","userLogout","id","userSignup","role","toJSON","getUserAccounts","accounts","accountDeposit","accountNumber","amount","put","account","accountWithdraw","userId","accountTransfer","source","target","accountOpen","ownerId","type","accountClose","accountReopen"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport { AppFactory } from './app';\n\nconst appRef = new AppFactory();\n\nconst baseURL = \"/api\";\n\nconst instance = () => Axios.create({\n  baseURL\n});\n\nexport const initApp = () => new Promise((resolve, reject) => {\n  instance().get(\"/\")\n  .then(response => {\n    console.log(response);\n    let links = response.data._links;\n    \n    for (let name in links) {\n      appRef.setLink(name, links[name].href.replace('{?page,size,sort}', ''))\n    }\n    console.log(appRef);\n\n    resolve({\n      success: true\n    });\n  })\n  .catch(error => {\n    console.error(error);\n    reject(error);\n  });\n});\n\n\nexport const getAllCustomers = (endpoint) => new Promise((resolve, reject) => {\n  instance().get(`/customers/all`)\n  .then(response => {\n    console.log(response.data);\n    resolve({\n      customers: response.data\n    });\n  })\n  .catch(error => {\n    console.error(error);\n    reject(error);\n  })\n});\n\nexport const userLogin = (username, pin) => new Promise((resolve, reject) => {\n  instance().post('/customers/login', { username, pin })\n  .then(response => {\n    console.log(response);\n    let user = response.data;\n    resolve({\n      user\n    });\n  })\n  .catch(error => {\n    console.error(error);\n    console.log(error.response);\n    \n    reject(new Error(error.response.data.message));\n  });\n})\n\n\nexport const userLogout = (user) => new Promise((resolve, reject) => {\n\n    instance().get(`/customers/logout/${user.id}`)\n    .then(response => {\n      console.log(response);\n      resolve({\n        success: response.data\n      });\n    })\n    .catch(error => {\n      console.error(error);\n      reject(error);\n    });\n\n});\n\nexport const userSignup = (username, pin) => new Promise((resolve, reject) => {\n  instance().post(`/customers/create`, { username, pin, role: 0})\n  .then(response => {\n    resolve({\n      user: response.data\n    });\n  })\n  .catch((error) => {\n    console.log(error.toJSON());\n    console.log(error.response);\n      \n    reject(new Error(error.response.data.message));\n  });\n});\n\n\nexport const getUserAccounts = (user) => new Promise((resolve, reject) => {\n\n  instance().get(`/accounts/for/${user.id}`)\n  .then(response => {\n    console.log(response);\n\n    resolve({\n      accounts: response.data\n    });\n  })\n  .catch(error => {\n    console.log(error.response.data);\n    reject(new Error(error.response.data.message));\n  });\n\n});\n\n\n/**\n * Initiate Deposit request with server\n * @param {number} accountNumber Deposit target account\n * @param {number} amount amount of money to deposit\n * @returns {Promise<any>}\n */\nexport const accountDeposit = (accountNumber, amount) => new Promise((resolve, reject) => {\n  instance().put(`/accounts/deposit/${accountNumber}`, { amount })\n  .then(response => {\n    console.log(\"Deposit Response: \", response);\n    \n    resolve({\n      account: response.data\n    })\n  })\n  .catch(error => {\n    console.error(\"Deposit Error: \", error.response);\n    reject(new Error(error.response.data.message));\n  })\n});\n\n\n/**\n * Initiate a withdraw request with server\n * @param {number} accountNumber Withdraw target\n * @param {number} amount amount of money to withdraw\n * @param {User} user User making the request\n * @returns {Promise<any>}\n */\nexport const accountWithdraw = (accountNumber, amount, user) => new Promise((resolve, reject) => {\n  instance().put(`/accounts/withdraw/${accountNumber}`, { amount, userId: user.id })\n  .then(response => {\n    console.log(\"Withdraw Response: \", response);\n    \n    resolve({\n      account: response.data\n    })\n  })\n  .catch(error => {\n    console.error(\"Withdraw Error: \", error.response);\n    reject(new Error(error.response.data.message));\n  })\n});\n\n/**\n * Initiate transfer between accounts\n * @param {Number} source Source Account Number\n * @param {Number} target Destination Account Number\n * @param {number} amount Amount in $ to be transferred from source to destination\n * @param {User} user User making the transfer request\n * @returns {Promise<any>}\n */\nexport const accountTransfer = (source, target, amount, user) => new Promise((resolve, reject) => {\n  instance().post('/accounts/transfer', { source, target, amount, userId: user.id})\n  .then(response => {\n    console.log(\"Transfer Response: \", response);\n    \n    resolve({\n      account: response.data\n    })\n  })\n  .catch(error => {\n    console.error(\"Transfer Error: \", error.response);\n    reject(new Error(error.response.data.message));\n  })\n});\n\n\n/**\n * \n * @param {{ownerId: number, type: string, amount: number}} account params\n * @returns {Promise<any>} \n */\nexport const accountOpen = ({ ownerId, type, amount }) => new Promise((resolve, reject) => {\n  instance().post(`/accounts/open`, { ownerId, type, amount })\n  .then(response => {\n    resolve({\n      account: response.data,\n      ...response\n    });\n  })\n  .catch(error => {\n    console.error(\"Account Open Error: \", error.response);\n    reject(new Error(error.response.data.message));\n  });\n});\n\n\n/**\n * Initiate close request\n * @param {number} accountNumber target account to close\n * @param {User} user user object\n * @returns {Promise<any>}\n */\nexport const accountClose = (accountNumber, user) => new Promise((resolve, reject) => {\n  instance().put(`/accounts/close/${accountNumber}`, { userId: user.id })\n  .then(response => {\n    console.log(\"Account close response: \", response);\n    resolve({\n      account: response.data\n    });\n  })\n  .catch(error => {\n    console.error(\"Account Close Error: \", error.response)\n    reject(new Error(error.response.data.message));\n  });\n});\n\n\n/**\n * Initiate reopen account request\n * @param {number} accountNumber target account number\n * @param {User} user user object with id field\n * @returns {Promise<any>}\n */\nexport const accountReopen = (accountNumber, user) => new Promise((resolve, reject) => {\n  instance().put(`/accounts/reopen/${accountNumber}`, { userId: user.id })\n  .then(response => {\n    console.log(\"Account Reopen Response: \", response);\n    resolve({\n      account: response.data\n    });\n  })\n  .catch(error => {\n    console.error(\"Account Reopen Error: \", error.response)\n    reject(new Error(error.response.data.message));\n  });\n});"]},"metadata":{},"sourceType":"module"}